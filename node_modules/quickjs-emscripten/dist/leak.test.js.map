{"version":3,"file":"leak.test.js","sourceRoot":"","sources":["../ts/leak.test.ts"],"names":[],"mappings":"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","sourcesContent":["import assert from \"assert\"\nimport { getQuickJS, newQuickJSAsyncWASMModule, newQuickJSWASMModule } from \".\"\nimport { QuickJSWASMModule } from \"./module\"\nimport { DEBUG_ASYNC, DEBUG_SYNC, memoizePromiseFactory as memoizeNewModule } from \"./variants\"\n\nconst TEST_LEAK = Boolean(process.env.TEST_LEAK)\n\nfunction checkModuleForLeaks(this: Mocha.Suite, getModule: () => Promise<QuickJSWASMModule>) {\n  let wasmModule: QuickJSWASMModule\n  this.timeout(Infinity)\n\n  beforeEach(async function () {\n    wasmModule = await getModule()\n    const ffi = wasmModule.getFFI()\n    if (!ffi.QTS_BuildIsSanitizeLeak()) {\n      console.warn(\"Note: leak sanitizer not enabled in this build.\")\n    }\n  })\n\n  it(\"if DEBUG and not ASYNCIFY, should have sanitizer.\", () => {\n    const ffi = wasmModule.getFFI()\n    if (ffi.QTS_BuildIsSanitizeLeak()) {\n      // Ok! sanitizer enabled\n      return\n    }\n\n    if (ffi.QTS_BuildIsDebug() && !ffi.QTS_BuildIsAsyncify()) {\n      assert.fail(\"Sanitizer should be enabled in sync debug build.\")\n    }\n  })\n\n  const DURATION_MS = TEST_LEAK ? 10 * 1000 : 100\n  const MAX_ITERATIONS = 1000\n  const PASSED_RECENTLY: Array<keyof typeof checks> = [\"runtime\", \"runtimeContext\"]\n  const PRIORITY: Array<keyof typeof checks> = [\"eval\", \"dumpEval\"]\n\n  const checks = {\n    runtime() {\n      const rt = wasmModule.newRuntime()\n      rt.dispose()\n    },\n    runtimeContext() {\n      const rt = wasmModule.newRuntime()\n      const ctx = rt.newContext()\n      ctx.dispose()\n      rt.dispose()\n    },\n    moduleContext() {\n      const ctx = wasmModule.newContext()\n      ctx.dispose()\n    },\n    newString() {\n      const ctx = wasmModule.newContext()\n      const longString = \"a\".repeat(1024 * 1024)\n      const string = ctx.newString(longString)\n      string.dispose()\n      ctx.dispose()\n    },\n    getString() {\n      const ctx = wasmModule.newContext()\n      const longString = \"a\".repeat(1024 * 1024)\n      const string = ctx.newString(longString)\n      ctx.getString(string)\n      string.dispose()\n      ctx.dispose()\n    },\n    dumpString() {\n      const ctx = wasmModule.newContext()\n      const longString = \"a\".repeat(1024 * 1024)\n      const string = ctx.newString(longString)\n      ctx.dump(string)\n      string.dispose()\n      ctx.dispose()\n    },\n    newNumber() {\n      const ctx = wasmModule.newContext()\n      const number = ctx.newNumber(42)\n      number.dispose()\n      ctx.dispose()\n    },\n    getNumber() {\n      const ctx = wasmModule.newContext()\n      const number = ctx.newNumber(42)\n      ctx.getNumber(number)\n      number.dispose()\n      ctx.dispose()\n    },\n    dumpNumber() {\n      const ctx = wasmModule.newContext()\n      const number = ctx.newNumber(42)\n      ctx.dump(number)\n      number.dispose()\n      ctx.dispose()\n    },\n    eval() {\n      const ctx = wasmModule.newContext()\n      const arrayValue = \"[\" + '\"a\",'.repeat(1024) + \"]\"\n      const result = ctx.evalCode(arrayValue)\n      ctx.unwrapResult(result).dispose()\n      ctx.dispose()\n    },\n    dumpEval() {\n      const ctx = wasmModule.newContext()\n      const arrayValue = \"[\" + '\"a\",'.repeat(1024) + \"]\"\n      const result = ctx.evalCode(arrayValue)\n      const handle = ctx.unwrapResult(result)\n      ctx.dump(handle)\n      handle.dispose()\n      ctx.dispose()\n    },\n  }\n\n  const checkNames = Object.keys(checks) as Array<keyof typeof checks>\n  checkNames.sort((a, b) => {\n    if (PRIORITY.includes(a) && PRIORITY.includes(b)) {\n      return 0\n    }\n\n    if (PRIORITY.includes(a)) {\n      return -1\n    }\n\n    if (PRIORITY.includes(b)) {\n      return 1\n    }\n\n    const aIndex = PASSED_RECENTLY.indexOf(a)\n    const bIndex = PASSED_RECENTLY.indexOf(b)\n    return aIndex - bIndex\n  })\n\n  for (const checkName of checkNames) {\n    const fn = checks[checkName as keyof typeof checks]\n    it(`should not leak: ${checkName}`, () => {\n      console.log(`Running ${checkName}...`)\n      const startedAt = Date.now()\n      let i = 0\n      for (; i < MAX_ITERATIONS; i++) {\n        fn()\n        if (i > 1 && Date.now() - startedAt > DURATION_MS) {\n          break\n        }\n      }\n\n      console.log(i, \"iterations,\", i / DURATION_MS, \"iterations/ms\")\n\n      const didLeak = wasmModule.getFFI().QTS_RecoverableLeakCheck()\n      assert.strictEqual(didLeak, 0, \"no leaks\")\n    })\n  }\n}\n\ndescribe(\"Leak checks (most accurate with debug build)\", function () {\n  describe(\"DEBUG sync module\", function () {\n    const loader = memoizeNewModule(() => newQuickJSWASMModule(DEBUG_SYNC))\n    checkModuleForLeaks.call(this, loader)\n  })\n\n  describe(\"RELEASE sync module\", function () {\n    checkModuleForLeaks.call(this, getQuickJS)\n  })\n\n  describe.skip(\"DEBUG async module\", function () {\n    const loader = memoizeNewModule(() => newQuickJSAsyncWASMModule(DEBUG_ASYNC))\n    checkModuleForLeaks.call(this, loader)\n  })\n\n  // Leaving this enabled, but note that we now disable\n  // leak sanitizer for ASYNCIFY since it's not reliable.\n  describe(\"RELEASE async module\", function () {\n    const loader = memoizeNewModule(() => newQuickJSAsyncWASMModule())\n    checkModuleForLeaks.call(this, loader)\n  })\n})\n"]}