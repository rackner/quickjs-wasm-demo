{"version":3,"file":"readme.test.js","sourceRoot":"","sources":["../ts/readme.test.ts"],"names":[],"mappings":"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","sourcesContent":["import assert from \"assert\"\nimport {\n  DEBUG_SYNC,\n  getQuickJS,\n  newAsyncContext,\n  newQuickJSAsyncWASMModule,\n  newQuickJSWASMModule,\n  shouldInterruptAfterDeadline,\n} from \".\"\nimport { QuickJSWASMModule } from \"./module\"\nimport { TestQuickJSWASMModule } from \"./module-test\"\nimport { memoizePromiseFactory } from \"./variants\"\n\ndescribe(\"README.md\", () => {\n  const originalConsoleLog = console.log\n  const boundConsoleLog = originalConsoleLog.bind(console)\n  let consoleLogCalls: unknown[][] = []\n  let QuickJS: TestQuickJSWASMModule\n\n  beforeEach(async () => {\n    consoleLogCalls = []\n    console.log = (...args: unknown[]) => {\n      consoleLogCalls.push(args)\n      boundConsoleLog(...args)\n    }\n    QuickJS = new TestQuickJSWASMModule(await getQuickJS())\n  })\n\n  afterEach(() => {\n    console.log = originalConsoleLog\n    QuickJS.disposeAll()\n    QuickJS.assertNoMemoryAllocated()\n  })\n\n  describe(\"intro\", () => {\n    it(\"first example\", async () => {\n      {\n        async function main() {\n          const QuickJS = await getQuickJS()\n          const vm = QuickJS.newContext()\n\n          const world = vm.newString(\"world\")\n          vm.setProp(vm.global, \"NAME\", world)\n          world.dispose()\n\n          const result = vm.evalCode(`\"Hello \" + NAME + \"!\"`)\n          if (result.error) {\n            console.log(\"Execution failed:\", vm.dump(result.error))\n            result.error.dispose()\n          } else {\n            console.log(\"Success:\", vm.dump(result.value))\n            result.value.dispose()\n          }\n\n          vm.dispose()\n        }\n\n        await main()\n      }\n\n      assert.strictEqual(consoleLogCalls[0].join(\" \"), \"Success: Hello world!\")\n    })\n\n    it(\"eval example\", async () => {\n      {\n        await getQuickJS().then((QuickJS) => {\n          const result = QuickJS.evalCode(\"1 + 1\", {\n            shouldInterrupt: shouldInterruptAfterDeadline(Date.now() + 1000),\n            memoryLimitBytes: 1024 * 1024,\n          })\n          console.log(result)\n        })\n      }\n\n      assert.strictEqual(consoleLogCalls[0].join(\" \"), \"2\")\n    })\n  })\n\n  describe(\"interpreter\", () => {\n    it(\"context example\", () => {\n      {\n        const vm = QuickJS.newContext()\n        let state = 0\n\n        const fnHandle = vm.newFunction(\"nextId\", () => {\n          return vm.newNumber(++state)\n        })\n\n        vm.setProp(vm.global, \"nextId\", fnHandle)\n        fnHandle.dispose()\n\n        const nextId = vm.unwrapResult(vm.evalCode(`nextId(); nextId(); nextId()`))\n        console.log(\"vm result:\", vm.getNumber(nextId), \"native state:\", state)\n\n        nextId.dispose()\n        vm.dispose()\n      }\n\n      assert.strictEqual(consoleLogCalls[0].join(\" \"), \"vm result: 3 native state: 3\")\n    })\n\n    it(\"runtime example\", () => {\n      // prettier-ignore\n      {\nconst runtime = QuickJS.newRuntime()\n// \"Should be enough for everyone\" -- attributed to B. Gates\nruntime.setMemoryLimit(1024 * 640)\n// Limit stack size\nruntime.setMaxStackSize(1024 * 320)\n// Interrupt computation after 1024 calls to the interrupt handler\nlet interruptCycles = 0\nruntime.setInterruptHandler(() => ++interruptCycles > 1024)\n// Toy module system that always returns the module name\n// as the default export\nruntime.setModuleLoader(moduleName =>\n  `export default '${moduleName}'`)\nconst context = runtime.newContext()\nconst ok = context.evalCode(`\nimport fooName from './foo.js'\nglobalThis.result = fooName\n`)\ncontext.unwrapResult(ok).dispose()\n// logs \"foo.js\"\nconsole.log(\n  context\n    .getProp(context.global, 'result')\n    .consume(context.dump)\n)\ncontext.dispose()\nruntime.dispose()\n    }\n\n      assert.strictEqual(consoleLogCalls[0].join(\" \"), \"foo.js\")\n    })\n\n    it(\"function example\", () => {\n      {\n        const vm = QuickJS.newContext()\n        // `console.log`\n        const logHandle = vm.newFunction(\"log\", (...args) => {\n          const nativeArgs = args.map(vm.dump)\n          console.log(\"QuickJS:\", ...nativeArgs)\n        })\n        // Partially implement `console` object\n        const consoleHandle = vm.newObject()\n        vm.setProp(consoleHandle, \"log\", logHandle)\n        vm.setProp(vm.global, \"console\", consoleHandle)\n        consoleHandle.dispose()\n        logHandle.dispose()\n\n        vm.unwrapResult(vm.evalCode(`console.log(\"Hello from QuickJS!\")`)).dispose()\n      }\n\n      assert.strictEqual(consoleLogCalls[0].join(\" \"), \"QuickJS: Hello from QuickJS!\")\n    })\n\n    it(\"promise example\", async () => {\n      {\n        const vm = QuickJS.newContext()\n        const fakeFileSystem = new Map([[\"example.txt\", \"Example file content\"]])\n\n        // Function that simulates reading data asynchronously\n        const readFileHandle = vm.newFunction(\"readFile\", (pathHandle) => {\n          const path = vm.getString(pathHandle)\n          const promise = vm.newPromise()\n          setTimeout(() => {\n            const content = fakeFileSystem.get(path)\n            promise.resolve(vm.newString(content || \"\"))\n          }, 100)\n          // IMPORTANT: Once you resolve an async action inside QuickJS,\n          // call runtime.executePendingJobs() to run any code that was\n          // waiting on the promise or callback.\n          promise.settled.then(vm.runtime.executePendingJobs)\n          return promise.handle\n        })\n        readFileHandle.consume((handle) => vm.setProp(vm.global, \"readFile\", handle))\n\n        // Evaluate code that uses `readFile`, which returns a promise\n        const result = vm.evalCode(`(async () => {\n          const content = await readFile('example.txt')\n          return content.toUpperCase()\n        })()`)\n        const promiseHandle = vm.unwrapResult(result)\n\n        // Convert the promise handle into a native promise and await it.\n        // If code like this deadlocks, make sure you are calling\n        // runtime.executePendingJobs appropriately.\n        const resolvedResult = await vm.resolvePromise(promiseHandle)\n        promiseHandle.dispose()\n        const resolvedHandle = vm.unwrapResult(resolvedResult)\n        console.log(\"Result:\", vm.getString(resolvedHandle))\n        resolvedHandle.dispose()\n      }\n\n      assert.strictEqual(consoleLogCalls[0].join(\" \"), \"Result: EXAMPLE FILE CONTENT\")\n    })\n\n    it(\"asyncify module loader example\", async () => {\n      {\n        const module = await newQuickJSAsyncWASMModule()\n        const runtime = module.newRuntime()\n        const path = await import(\"path\")\n        const { promises: fs } = await import(\"fs\")\n\n        const importsPath = path.join(__dirname, \"../examples/imports\") + \"/\"\n        // Module loaders can return promises.\n        // Execution will suspend until the promise resolves.\n        runtime.setModuleLoader((moduleName) => {\n          const modulePath = path.join(importsPath, moduleName)\n          if (!modulePath.startsWith(importsPath)) {\n            throw new Error(\"out of bounds\")\n          }\n          console.log(\"loading\", moduleName, \"from\", modulePath)\n          return fs.readFile(modulePath, \"utf-8\")\n        })\n\n        // evalCodeAsync is required when execution may suspend.\n        const context = runtime.newContext()\n        const result = await context.evalCodeAsync(`\n        import * as React from 'esm.sh/react@17'\n        import * as ReactDOMServer from 'esm.sh/react-dom@17/server'\n        const e = React.createElement\n        globalThis.html = ReactDOMServer.renderToStaticMarkup(\n          e('div', null, e('strong', null, 'Hello world!'))\n        )\n        `)\n        context.unwrapResult(result).dispose()\n        const html = context.getProp(context.global, \"html\").consume(context.getString)\n        console.log(html) // <div><strong>Hello world!</strong></div>\n      }\n\n      const lastLogMessage = consoleLogCalls[consoleLogCalls.length - 1].join(\" \")\n      assert.strictEqual(lastLogMessage, \"<div><strong>Hello world!</strong></div>\")\n    })\n\n    it(\"asyncify file reading example\", async () => {\n      {\n        const context = await newAsyncContext()\n        const path = await import(\"path\")\n        const { promises: fs } = await import(\"fs\")\n\n        const importsPath = path.join(__dirname, \"../examples/imports\") + \"/\"\n        const readFileHandle = context.newAsyncifiedFunction(\"readFile\", async (pathHandle) => {\n          const pathString = path.join(importsPath, context.getString(pathHandle))\n          if (!pathString.startsWith(importsPath)) {\n            throw new Error(\"out of bounds\")\n          }\n          const data = await fs.readFile(pathString, \"utf-8\")\n          return context.newString(data)\n        })\n        readFileHandle.consume((fn) => context.setProp(context.global, \"readFile\", fn))\n\n        // evalCodeAsync is required when execution may suspend.\n        const result = await context.evalCodeAsync(`\n        // Not a promise:       vvvvvvvvvvvvvvvvvvvv \n        const data = JSON.parse(readFile('data.json'))\n        data.map(x => x.toUpperCase()).join(' ')\n        `)\n        const upperCaseData = context.unwrapResult(result).consume(context.getString)\n        console.log(upperCaseData) // 'VERY USEFUL DATA'\n      }\n\n      assert.strictEqual(consoleLogCalls[0].join(\" \"), \"VERY USEFUL DATA\")\n    })\n  })\n\n  describe(\"testing example\", () => {\n    // Define your test suite in a function, so that you can test against\n    // different module loaders.\n    function myTests(moduleLoader: () => Promise<QuickJSWASMModule>) {\n      let QuickJS: TestQuickJSWASMModule\n      beforeEach(async () => {\n        // Get a unique TestQuickJSWASMModule instance for each test.\n        const wasmModule = await moduleLoader()\n        QuickJS = new TestQuickJSWASMModule(wasmModule)\n      })\n      afterEach(() => {\n        // Assert that the test disposed all handles. The DEBUG_SYNC build\n        // variant will show detailed traces for each leak.\n        QuickJS.assertNoMemoryAllocated()\n      })\n\n      it(\"works well\", () => {\n        // TODO: write a test using QuickJS\n        const context = QuickJS.newContext()\n        context.unwrapResult(context.evalCode(\"1 + 1\")).dispose()\n        context.dispose()\n      })\n    }\n\n    // Run the test suite against a matrix of module loaders.\n    describe(\"Check for memory leaks with QuickJS DEBUG build\", () => {\n      const moduleLoader = memoizePromiseFactory(() => newQuickJSWASMModule(DEBUG_SYNC))\n      myTests(moduleLoader)\n    })\n\n    describe(\"Realistic test with QuickJS RELEASE build\", () => {\n      myTests(getQuickJS)\n    })\n  })\n})\n"]}