{"version":3,"file":"lifetime.test.js","sourceRoot":"","sources":["../ts/lifetime.test.ts"],"names":[],"mappings":";;;;;AAAA,yCAA4C;AAC5C,oDAA2B;AAE3B,QAAQ,CAAC,UAAU,EAAE,GAAG,EAAE;IACxB,QAAQ,CAAC,UAAU,EAAE,GAAG,EAAE;QACxB,EAAE,CAAC,kBAAkB,EAAE,GAAG,EAAE;YAC1B,MAAM,QAAQ,GAAG,IAAI,mBAAQ,CAAC,CAAC,CAAC,CAAA;YAChC,MAAM,MAAM,GAAG,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,KAAK,GAAG,CAAC,CAAC,CAAA;YACnD,gBAAM,CAAC,WAAW,CAAC,MAAM,EAAE,CAAC,CAAC,CAAA;QAC/B,CAAC,CAAC,CAAA;QAEF,EAAE,CAAC,uBAAuB,EAAE,GAAG,EAAE;YAC/B,IAAI,QAAQ,GAAG,KAAK,CAAA;YACpB,MAAM,QAAQ,GAAG,IAAI,mBAAQ,CAAC,CAAC,EAAE,SAAS,EAAE,GAAG,EAAE;gBAC/C,QAAQ,GAAG,IAAI,CAAA;YACjB,CAAC,CAAC,CAAA;YACF,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,KAAK,GAAG,CAAC,CAAC,CAAA;YACpC,gBAAM,CAAC,WAAW,CAAC,QAAQ,CAAC,KAAK,EAAE,KAAK,CAAC,CAAA;YACzC,gBAAM,CAAC,WAAW,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAA;QACpC,CAAC,CAAC,CAAA;IACJ,CAAC,CAAC,CAAA;AACJ,CAAC,CAAC,CAAA;AAEF,QAAQ,CAAC,OAAO,EAAE,GAAG,EAAE;IACrB,QAAQ,CAAC,YAAY,EAAE,GAAG,EAAE;QAC1B,SAAS,OAAO;YACd,IAAI,CAAC,GAAG,CAAC,CAAA;YACT,OAAO;gBACL,SAAS,EAAE,GAAG,EAAE,CAAC,CAAC,EAAE;gBACpB,KAAK,EAAE,GAAG,EAAE,CAAC,CAAC;aACf,CAAA;QACH,CAAC;QACD,EAAE,CAAC,4BAA4B,EAAE,GAAG,EAAE;YACpC,MAAM,EAAE,SAAS,EAAE,KAAK,EAAE,GAAG,OAAO,EAAE,CAAA;YACtC,MAAM,cAAc,GAAG,gBAAK,CAAC,SAAS,CAAC,CAAC,KAAK,EAAE,EAAE;gBAC/C,KAAK,CAAC,MAAM,CAAC,IAAI,mBAAQ,CAAC,OAAO,EAAE,SAAS,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,SAAS,EAAE,CAAC,CAAC,CAAA;gBAClE,OAAO,KAAK,CAAC,MAAM,CAAC,IAAI,mBAAQ,CAAC,QAAQ,EAAE,SAAS,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,SAAS,EAAE,CAAC,CAAC,CAAA;YAC5E,CAAC,CAAC,CAAA;YAEF,gBAAM,CAAC,WAAW,CAAC,cAAc,CAAC,KAAK,EAAE,KAAK,CAAC,CAAA;YAC/C,gBAAM,CAAC,WAAW,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC,CAAA;QAChC,CAAC,CAAC,CAAA;IACJ,CAAC,CAAC,CAAA;AACJ,CAAC,CAAC,CAAA","sourcesContent":["import { Lifetime, Scope } from \"./lifetime\"\nimport assert from \"assert\"\n\ndescribe(\"Lifetime\", () => {\n  describe(\".consume\", () => {\n    it(\"yeilds the value\", () => {\n      const lifetime = new Lifetime(1)\n      const result = lifetime.consume((l) => l.value + 1)\n      assert.strictEqual(result, 2)\n    })\n\n    it(\"disposes the lifetime\", () => {\n      let disposed = false\n      const lifetime = new Lifetime(2, undefined, () => {\n        disposed = true\n      })\n      lifetime.consume((l) => l.value * 2)\n      assert.strictEqual(lifetime.alive, false)\n      assert.strictEqual(disposed, true)\n    })\n  })\n})\n\ndescribe(\"Scope\", () => {\n  describe(\".withScope\", () => {\n    function counter() {\n      let n = 0\n      return {\n        increment: () => n++,\n        count: () => n,\n      }\n    }\n    it(\"disposes all the lifetimes\", () => {\n      const { increment, count } = counter()\n      const secondLifetime = Scope.withScope((scope) => {\n        scope.manage(new Lifetime(\"first\", undefined, (s) => increment()))\n        return scope.manage(new Lifetime(\"second\", undefined, (s) => increment()))\n      })\n\n      assert.strictEqual(secondLifetime.alive, false)\n      assert.strictEqual(count(), 2)\n    })\n  })\n})\n"]}