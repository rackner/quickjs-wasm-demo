{"version":3,"file":"asyncify-helpers.test.js","sourceRoot":"","sources":["../ts/asyncify-helpers.test.ts"],"names":[],"mappings":";;;;;AAAA,oDAA2B;AAC3B,yDAAiD;AAEjD,QAAQ,CAAC,YAAY,EAAE,GAAG,EAAE;IAC1B,MAAM,WAAW,GAAG,IAAA,+BAAY,EAC9B,SAAS,EACT,QAAQ,CAAC,EAAE,OAAO,EAAE,CAA2B,EAAE,CAA2B;QAC1E,OAAO,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAA;IAClD,CAAC,CACF,CAAA;IAED,EAAE,CAAC,iCAAiC,EAAE,GAAG,EAAE;QACzC,MAAM,IAAI,GAAG,WAAW,CAAC,CAAC,EAAE,CAAC,CAAC,CAAA;QAC9B,gBAAM,CAAC,WAAW,CAAC,IAAI,EAAE,EAAE,CAAC,CAAA;IAC9B,CAAC,CAAC,CAAA;IAEF,EAAE,CAAC,mCAAmC,EAAE,KAAK,IAAI,EAAE;QACjD,MAAM,MAAM,GAAG,WAAW,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAA;QACjD,IAAA,gBAAM,EAAC,MAAM,YAAY,OAAO,EAAE,YAAY,CAAC,CAAA;QAC/C,MAAM,GAAG,GAAG,MAAM,MAAM,CAAA;QACxB,gBAAM,CAAC,WAAW,CAAC,GAAG,EAAE,CAAC,EAAE,gBAAgB,CAAC,CAAA;IAC9C,CAAC,CAAC,CAAA;IAEF,EAAE,CAAC,wBAAwB,EAAE,GAAG,EAAE;QAChC,MAAM,EAAE,GAAG,IAAA,+BAAY,EAAC,SAAS,EAAE,QAAQ,CAAC;YAC1C,MAAM,IAAI,KAAK,CAAC,YAAY,CAAC,CAAA;QAC/B,CAAC,CAAC,CAAA;QAEF,gBAAM,CAAC,MAAM,CAAC,GAAG,EAAE,CAAC,EAAE,EAAE,EAAE,YAAY,CAAC,CAAA;IACzC,CAAC,CAAC,CAAA;IAEF,EAAE,CAAC,wBAAwB,EAAE,GAAG,EAAE;QAChC,MAAM,EAAE,GAAG,IAAA,+BAAY,EAAC,SAAS,EAAE,QAAQ,CAAC,EAAE,OAAO;YACnD,KAAK,CAAC,CAAC,OAAO,CAAC,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC,UAAU,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC,CAAC,CAAA;YACjE,MAAM,IAAI,KAAK,CAAC,aAAa,CAAC,CAAA;QAChC,CAAC,CAAC,CAAA;QAEF,gBAAM,CAAC,OAAO,CAAC,GAAG,EAAE,CAAC,EAAE,EAAE,EAAE,aAAa,CAAC,CAAA;IAC3C,CAAC,CAAC,CAAA;AACJ,CAAC,CAAC,CAAA","sourcesContent":["import assert from \"assert\"\nimport { maybeAsyncFn } from \"./asyncify-helpers\"\n\ndescribe(\"maybeAsync\", () => {\n  const addPromises = maybeAsyncFn(\n    undefined,\n    function* (awaited, a: number | Promise<number>, b: number | Promise<number>) {\n      return (yield* awaited(a)) + (yield* awaited(b))\n    }\n  )\n\n  it(\"has sync output for sync inputs\", () => {\n    const sum2 = addPromises(5, 6)\n    assert.strictEqual(sum2, 11)\n  })\n\n  it(\"has async output for async inputs\", async () => {\n    const result = addPromises(Promise.resolve(1), 2)\n    assert(result instanceof Promise, \"is promise\")\n    const sum = await result\n    assert.strictEqual(sum, 3, \"sums correctly\")\n  })\n\n  it(\"throws any sync errors\", () => {\n    const fn = maybeAsyncFn(undefined, function* () {\n      throw new Error(\"sync error\")\n    })\n\n    assert.throws(() => fn(), /sync error/)\n  })\n\n  it(\"it throws async errors\", () => {\n    const fn = maybeAsyncFn(undefined, function* (awaited) {\n      yield* awaited(new Promise((resolve) => setTimeout(resolve, 50)))\n      throw new Error(\"async error\")\n    })\n\n    assert.rejects(() => fn(), /async error/)\n  })\n})\n"]}