{"version":3,"file":"variants.test.js","sourceRoot":"","sources":["../ts/variants.test.ts"],"names":[],"mappings":";;;;;AAAA,oDAA2B;AAC3B,wBAA+E;AAE/E,yCAOmB;AAEnB,qDAAqD;AACrD,KAAK,UAAU,mBAAmB,CAAC,OAA6C;IAC9E,MAAM,UAAU,GACd,OAAO,CAAC,IAAI,KAAK,MAAM;QACrB,CAAC,CAAC,MAAM,IAAA,uBAAoB,EAAC,OAAO,CAAC;QACrC,CAAC,CAAC,MAAM,IAAA,4BAAyB,EAAC,OAAO,CAAC,CAAA;IAC9C,OAAO,kBAAkB,CAAC,UAAU,CAAC,CAAA;AACvC,CAAC;AAED,SAAS,kBAAkB,CAAC,UAA6B;IACvD,MAAM,GAAG,GAAG,UAAU,CAAC,MAAM,EAAE,CAAA;IAC/B,OAAO;QACL,QAAQ,EAAE,GAAG,CAAC,KAAK;QACnB,KAAK,EAAE,GAAG,CAAC,gBAAgB,EAAE;QAC7B,QAAQ,EAAE,GAAG,CAAC,mBAAmB,EAAE;QACnC,QAAQ,EAAE,GAAG,CAAC,uBAAuB,EAAE;KACxC,CAAA;AACH,CAAC;AAED,MAAM,eAAe,GAAG;IACtB,QAAQ,EAAE,KAAK;IACf,KAAK,EAAE,CAAC;IACR,QAAQ,EAAE,CAAC;IACX,QAAQ,EAAE,CAAC;CACZ,CAAA;AAED,QAAQ,CAAC,UAAU,EAAE,GAAG,EAAE;IACxB,QAAQ,CAAC,oCAAoC,EAAE,GAAG,EAAE;QAClD,EAAE,CAAC,6BAA6B,EAAE,KAAK,IAAI,EAAE;YAC3C,gBAAM,CAAC,eAAe,CAAC,kBAAkB,CAAC,MAAM,IAAA,aAAU,GAAE,CAAC,EAAE,eAAe,CAAC,CAAA;QACjF,CAAC,CAAC,CAAA;IACJ,CAAC,CAAC,CAAA;IACF,QAAQ,CAAC,YAAY,EAAE,GAAG,EAAE;QAC1B,EAAE,CAAC,6BAA6B,EAAE,KAAK,IAAI,EAAE;YAC3C,gBAAM,CAAC,eAAe,CAAC,MAAM,mBAAmB,CAAC,qBAAU,CAAC,EAAE;gBAC5D,QAAQ,EAAE,IAAI;gBACd,KAAK,EAAE,CAAC;gBACR,QAAQ,EAAE,CAAC;gBACX,QAAQ,EAAE,CAAC;aACZ,CAAC,CAAA;QACJ,CAAC,CAAC,CAAA;IACJ,CAAC,CAAC,CAAA;IAEF,QAAQ,CAAC,cAAc,EAAE,GAAG,EAAE;QAC5B,EAAE,CAAC,6BAA6B,EAAE,KAAK,IAAI,EAAE;YAC3C,gBAAM,CAAC,eAAe,CAAC,MAAM,mBAAmB,CAAC,uBAAY,CAAC,EAAE,eAAe,CAAC,CAAA;QAClF,CAAC,CAAC,CAAA;IACJ,CAAC,CAAC,CAAA;IAEF,QAAQ,CAAC,aAAa,EAAE,GAAG,EAAE;QAC3B,EAAE,CAAC,6BAA6B,EAAE,KAAK,IAAI,EAAE;YAC3C,gBAAM,CAAC,eAAe,CAAC,MAAM,mBAAmB,CAAC,sBAAW,CAAC,EAAE;gBAC7D,QAAQ,EAAE,IAAI;gBACd,KAAK,EAAE,CAAC;gBACR,QAAQ,EAAE,CAAC;gBACX,QAAQ,EAAE,CAAC;aACZ,CAAC,CAAA;QACJ,CAAC,CAAC,CAAA;IACJ,CAAC,CAAC,CAAA;IAEF,QAAQ,CAAC,eAAe,EAAE,GAAG,EAAE;QAC7B,EAAE,CAAC,6BAA6B,EAAE,KAAK,IAAI,EAAE;YAC3C,gBAAM,CAAC,eAAe,CAAC,MAAM,mBAAmB,CAAC,wBAAa,CAAC,EAAE;gBAC/D,QAAQ,EAAE,KAAK;gBACf,KAAK,EAAE,CAAC;gBACR,QAAQ,EAAE,CAAC;gBACX,QAAQ,EAAE,CAAC;aACZ,CAAC,CAAA;QACJ,CAAC,CAAC,CAAA;IACJ,CAAC,CAAC,CAAA;AACJ,CAAC,CAAC,CAAA","sourcesContent":["import assert from \"assert\"\nimport { getQuickJS, newQuickJSAsyncWASMModule, newQuickJSWASMModule } from \".\"\nimport { QuickJSWASMModule } from \"./module\"\nimport {\n  AsyncBuildVariant,\n  DEBUG_ASYNC,\n  DEBUG_SYNC,\n  RELEASE_ASYNC,\n  RELEASE_SYNC,\n  SyncBuildVariant,\n} from \"./variants\"\n\n// Verify that our variants are what we say they are.\nasync function getVariantBuildInfo(variant: SyncBuildVariant | AsyncBuildVariant) {\n  const wasmModule =\n    variant.type === \"sync\"\n      ? await newQuickJSWASMModule(variant)\n      : await newQuickJSAsyncWASMModule(variant)\n  return getModuleBuildInfo(wasmModule)\n}\n\nfunction getModuleBuildInfo(wasmModule: QuickJSWASMModule) {\n  const ffi = wasmModule.getFFI()\n  return {\n    ffiDebug: ffi.DEBUG,\n    debug: ffi.QTS_BuildIsDebug(),\n    asyncify: ffi.QTS_BuildIsAsyncify(),\n    sanitize: ffi.QTS_BuildIsSanitizeLeak(),\n  }\n}\n\nconst DEFAULT_VARIANT = {\n  ffiDebug: false,\n  debug: 0,\n  asyncify: 0,\n  sanitize: 0,\n}\n\ndescribe(\"variants\", () => {\n  describe(\"getQuickJS (alias of RELEASE_SYNC)\", () => {\n    it(\"has expected build settings\", async () => {\n      assert.deepStrictEqual(getModuleBuildInfo(await getQuickJS()), DEFAULT_VARIANT)\n    })\n  })\n  describe(\"DEBUG_SYNC\", () => {\n    it(\"has expected build settings\", async () => {\n      assert.deepStrictEqual(await getVariantBuildInfo(DEBUG_SYNC), {\n        ffiDebug: true,\n        debug: 1,\n        asyncify: 0,\n        sanitize: 1,\n      })\n    })\n  })\n\n  describe(\"RELEASE_SYNC\", () => {\n    it(\"has expected build settings\", async () => {\n      assert.deepStrictEqual(await getVariantBuildInfo(RELEASE_SYNC), DEFAULT_VARIANT)\n    })\n  })\n\n  describe(\"DEBUG_ASYNC\", () => {\n    it(\"has expected build settings\", async () => {\n      assert.deepStrictEqual(await getVariantBuildInfo(DEBUG_ASYNC), {\n        ffiDebug: true,\n        debug: 1,\n        asyncify: 1,\n        sanitize: 0,\n      })\n    })\n  })\n\n  describe(\"RELEASE_ASYNC\", () => {\n    it(\"has expected build settings\", async () => {\n      assert.deepStrictEqual(await getVariantBuildInfo(RELEASE_ASYNC), {\n        ffiDebug: false,\n        debug: 0,\n        asyncify: 1,\n        sanitize: 0,\n      })\n    })\n  })\n})\n"]}